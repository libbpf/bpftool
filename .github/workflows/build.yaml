name: build

on:
  pull_request:
    paths:
      - '.github/workflows/build.yaml'
      - 'docs/**'
      - 'include/**'
      - 'libbpf/**'
      - 'src/**'
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.after }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            make: make
          - os: macos-14
            make: gmake
        os: [ubuntu-22.04, macos-14]
    runs-on: ${{ matrix.os }}
    env:
      FEATURES: .llvm and .skeletons

    steps:
      - name: Checkout repository
        uses: actions/checkout@8f4b7f84864484a7bf31766abe9204da3cbe65b3 # v3.5.0
        with:
          submodules: true

      - name: Install dependencies (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              libbfd-dev libcap-dev libelf-dev libiberty-dev python3-docutils
          # clang/LLVM are already installed, but we're missing some aliases.
          CLANG_VERSION="$(echo '__clang_major__' | clang -E - | tail -n 1)"
          sudo update-alternatives \
              --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-"${CLANG_VERSION}" 50 \
              --slave /usr/bin/llvm-ar llvm-ar /usr/bin/llvm-ar-"${CLANG_VERSION}" \
              --slave /usr/bin/llvm-strip llvm-strip /usr/bin/llvm-strip-"${CLANG_VERSION}"
          echo "CLANG_VERSION=${CLANG_VERSION}" >> "${GITHUB_ENV}"

      - name: Install dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew update
          brew install \
              binutils \
              libelf \
              docutils \
              jq \
              llvm \
              make

          # Set up LLVM paths and aliases
          LLVM_PATH="$(brew --prefix llvm)"
          CLANG_VERSION="$(echo '__clang_major__' | ${LLVM_PATH}/bin/clang -E - | tail -n 1)"

          # Create symlinks for LLVM tools in a directory that's in PATH
          mkdir -p "${HOME}/bin"
          ln -sf "${LLVM_PATH}/bin/llvm-config" "${HOME}/bin/llvm-config"
          ln -sf "${LLVM_PATH}/bin/llvm-ar" "${HOME}/bin/llvm-ar"
          ln -sf "${LLVM_PATH}/bin/llvm-strip" "${HOME}/bin/llvm-strip"
          ln -sf "${LLVM_PATH}/bin/clang" "${HOME}/bin/clang"

          # Add to PATH
          echo "${HOME}/bin" >> $GITHUB_PATH
          echo "CLANG_VERSION=${CLANG_VERSION}" >> "${GITHUB_ENV}"
          echo "LLVM_PATH=${LLVM_PATH}" >> "${GITHUB_ENV}"

      - name: Build bpftool (default LLVM disassembler)
        run: |
          ${{ matrix.make }} -j -C src V=1
          ./src/bpftool 2>&1 | grep -q Usage
          ./src/bpftool -p version | \
              tee /dev/stderr | \
              jq --exit-status ".features | ${FEATURES}"

      - name: Build bpftool, with clang
        run: |
          ${{ matrix.make }} -C src clean
          LLVM=1 ${{ matrix.make }} -j -C src V=1
          ./src/bpftool 2>&1 | grep -q Usage
          ./src/bpftool -p version | \
              tee /dev/stderr | \
              jq --exit-status ".features | ${FEATURES}"

      - name: Build bpftool, with fallback to libbfd disassembler (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get remove -y llvm-"${CLANG_VERSION}"-dev
          ${{ matrix.make }} -C src clean
          ${{ matrix.make }} -j -C src V=1
          ./src/bpftool 2>&1 | grep -q Usage
          ./src/bpftool -p version | \
              tee /dev/stderr | \
              jq --exit-status ".features | .libbfd and (.llvm | not)"

      - name: Build bpftool, with libbfd, static build (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          ${{ matrix.make }} -C src clean
          EXTRA_CFLAGS=--static ${{ matrix.make }} -j -C src V=1
          ./src/bpftool 2>&1 | grep -q Usage
          ./src/bpftool -p version | \
              tee /dev/stderr | \
              jq --exit-status ".features | .libbfd and (.llvm | not)"
          ldd ./src/bpftool 2>&1 | \
              tee /dev/stderr | \
              grep -q 'not a dynamic executable'

      - name: Build bpftool's documentation
        run: |
          ${{ matrix.make }} -j -C docs
          grep -q '.TH "\?BPFTOOL"\? 8' ./docs/bpftool.8
